---
interface Props {
  size?: 'md' | 'lg'
  block?: boolean
  style?: 'outline' | 'primary' | 'inverted'
  class?: string
  href?: string
  [x: string]: any
}
const { size = 'md', style = 'primary', block, class: className, href, ...rest } = Astro.props
const sizes = {
  md: 'px-[2px] py-[2px]',
  lg: 'px-[2px] py-[2px]'
}
const spanSizes = {
  md: 'px-2 py-1',
  lg: 'px-20 py-6'
}
const styles = {
  outline:
    'relative inline-flex items-center justify-center overflow-hidden text-sm font-medium text-gray-800 uppercase rounded-lg group bg-gradient-to-tr from-primary-600 to-secondary-basic group-hover:from-primary-600 group-hover:to-secondary-basic hover:text-white dark:text-gray-200 focus:outline-none',
  primary:
    'relative inline-flex items-center justify-center overflow-hidden text-sm font-medium text-gray-200 uppercase rounded-lg group bg-gradient-to-tr from-primary-600 to-secondary-basic group-hover:from-primary-600 group-hover:to-secondary-basic hover:text-white dark:text-white focus:outline-none'
}
---

<a href={href}>
  <button {...rest} class:list={[block && 'w-full', sizes[size], styles[style], className]}>
    <span
      class={style === 'outline'
        ? `relative flex flex-row items-center transition-all ease-in duration-75 bg-gray-200 dark:bg-gray-700 rounded-md group-hover:bg-opacity-0 gap-2 ${spanSizes[size]}`
        : spanSizes[size]}
    >
      <slot />
    </span>
  </button>
</a>
